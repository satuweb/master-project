/* ===========================
   Mixins
   =========================== */

// = Grids
// -----------------------------

@mixin space-out($min, $max) {
  @for $i from $min through $max {
    &:first-child:nth-last-child(#{$i}),
    &:first-child:nth-last-child(#{$i}) ~ & {
      width: 1 / $i * 100%;
      position: relative;
      float: left;
    }
  }
}

//HOW TO USE @include space-out(1, 4);

// = Typography
// -----------------------------

//Fix rem in ie8
@mixin font-size($sizeValue: $base-font-size) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

@mixin line-height($line: $base-font-size) {
  line-height: ($line * 10) + px;
  line-height: $line + rem;
}

//text-gradient
@mixin textgradient($color1, $color2, $startPoint:left top, $endPoint:left bottom) {
  color: mix($color1, $color2);
  background: -webkit-gradient(linear, $startPoint, $endPoint, from($color1), to($color2));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

// antialiasing mode font rendering
@mixin font-smoothing {
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

//Text Ellipsis
@mixin multiLineEllipsis($text-overflow: ellipsis, $line: 1) {
  display: block;
  display: -webkit-box;
  -webkit-line-clamp: $line;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: $text-overflow;
}

//Text truncate
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// = Box Rules
// -----------------------------

/**
 * Fix the Height
 */

@mixin box-height($size) {
  height: $size; //Fallback in px
  height: calculateRem($size);
}

/**
 * Clearfix
 */
%clearfix {
  &:after {
    content: "";
    display: block;
    clear: both;
  }

}

/* Custom Scroll bar*/
@mixin scrollbar($color: rgba(0, 0, 0, .95)){
  &::-webkit-scrollbar {
    -webkit-appearance: none;
  }
  &::-webkit-scrollbar:vertical {
      width: 6px;
  }
  &::-webkit-scrollbar-thumb {
      background-color: $color;
      cursor: pointer;
  }
  &::-webkit-scrollbar-track { 
      background-color: transparent;
  } 
}

/**
 * Vertical align works in IE8
 */

@mixin v-center($with-children:false) {
  &:before {
    content: '';
    display: inline-block;
    height: 100%;
    vertical-align: middle;
  }

  // Make the contents vertically aligned
  @if ($with-children) {
    > * {
      @include v-center-content;
    }
  }
}

/**
 * Vertical align element
 */

@mixin v-center-content {
  display: inline-block;
  vertical-align: middle;
}

/**
 * Vertical align single element
 */
@mixin vertical-align($position: relative) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);
}

//How to use .element p { @include vertical-align();}

/**
 * Fullscreen Section
 */

@mixin fullscreen-section($with-children:false) {
  height: 100%;
  // Make the contents at 100% height and width
  @if ($with-children) {
    > div.wrapper, div.main, section {
      height: 100vh;
      width: 100%;
      float: left;
    }
  }
}

/**
* Background gradient
*/
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

//How to use: @include linear-gradient(to bottom, rgba($color2, 0.5) 0%, transparent 100%);

//Radial gradient
@mixin radial-gradient($from, $to) {
  background: -moz-radial-gradient(center, circle cover, $from 0%, $to 100%);
  background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, $from), color-stop(100%, $to));
  background: -webkit-radial-gradient(center, circle cover, $from 0%, $to 100%);
  background: -o-radial-gradient(center, circle cover, $from 0%, $to 100%);
  background: -ms-radial-gradient(center, circle cover, $from 0%, $to 100%);
  background: radial-gradient(center, circle cover, $from 0%, $to 100%);
  background-color: $from;
}

//background image
@mixin background($imgpath, $position: 0 0, $size: auto auto, $repeat: no-repeat) {
  background: {
    image: url($imgpath);
    position: $position;
    repeat: $repeat;
    size: $size;
  }
}

// = Convert PXtoRem
// -----------------------------
@mixin pxtorem($property, $values) {
  $px: ();
  $rem: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $px: append($px, $value);
      $rem: append($rem, $value);
    } @else {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == "px" {
        $px: append($px, $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" {
        $px: append($px, ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}

// = Triangle
// -----------------------------
/// @param {Direction} $direction - Triangle direction
/// @param {Color} $color [currentcolor] - Triangle color 
/// @param {Length} $size [1em] - Triangle size
/// Example: @include triangle ("up", 10px, #fff);
@mixin triangle($direction: "down", $size: 20px, $color: #000) {
  width: 0;
  height: 0;
  border-left: $size solid #{setTriangleColor($direction, "left", $color)};
  border-right: $size solid #{setTriangleColor($direction, "right", $color)};
  border-bottom: $size solid #{setTriangleColor($direction, "bottom", $color)};
  border-top: $size solid #{setTriangleColor($direction, "top", $color)};
}

//Utility function to return the relevant colour depending on what type of arrow it is
@function setTriangleColor($direction, $side, $color) {

  @if $direction == "left" and $side == "right" 
  or  $direction == "right" and $side == "left" 
  or $direction == "down" and $side == "top" 
  or $direction == "up" and $side == "bottom" {
    @return $color
  } @else {
    @return "transparent";
  }

}


// = Input text Placeholder
// -----------------------------

@mixin placeholder($color, $fontStyle: normal) {
  &::placeholder {
    color: $color;
    font-style: $fontStyle;
  }
  &::-webkit-input-placeholder { /* Chrome/Opera/Safari */
    color: $color;
    font-style: $fontStyle;
  }
  &::-moz-placeholder { /* Firefox 19+ */
    color: $color;
    font-style: $fontStyle;
  }
  &:-ms-input-placeholder { /* IE 10+ */
    color: $color;
    font-style: $fontStyle;
  }
  &:-moz-placeholder { /* Firefox 18- */
    color: $color;
    font-style: $fontStyle;
  }

  
  
  
}


// = Animation
// -----------------------------

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  animation: #{$str};
}

/* How to use
@include keyframes(slide-down) {
  0% { opacity: 1; }
  90% { opacity: 0; }
}

.element {
  @include animation('slide-down 5s 3');
}
*/

// = Breakpoints (bootstrap default)
// -----------------------------

@mixin breakpoint($point) {

  @if ($point == xl) {
    @media (min-width: $xl) {
      @content
    }
  } @else if ($point == lg) {
    @media (min-width: $lg) {
      @content
    }
  } @else if ($point == md) {
    @media (min-width: $md) {
      @content
    }
  } @else if ($point == sm) {
    @media (min-width: $sm) {
      @content
    }
  } @else if ($point == xs) {
    @media (min-width: $xs) {
      @content
    }
  } @else if ($point == xxs) {
    @media (min-width: $xxs) {
      @content
    }
  } @else if ($point == xxxs) {
    @media (max-width: $xxxs) {
      @content
    }
  }

}

@mixin breakpointMinMaxOr($min, $max, $or) {
  @media (min-width: $min) and (max-width: $max) and (orientation: $or) {
    @content
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

@mixin opacity($value) {
  $IEValue: $value*100;
  opacity: $value;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$IEValue+")";
  filter: alpha(opacity=$IEValue);
}

@mixin transform($transforms...) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}


@mixin transformOrigin($transforms...) {
  -moz-transform-origin: $transforms;
  -o-transform-origin: $transforms;
  -ms-transform-origin: $transforms;
  -webkit-transform-origin: $transforms;
  transform-origin: $transforms;
}


@mixin transformImportant($transforms...) {
  -moz-transform: $transforms !important;
  -o-transform: $transforms !important;
  -ms-transform: $transforms !important;
  -webkit-transform: $transforms !important;
  transform: $transforms !important;
}

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
  -moz-box-shadow: $shadow;
  box-shadow: $shadow;
}

@keyframes rotate-vertical {
  0% {
    transform: rotateY(0deg);
  }
  100% {
    transform: rotateY(360deg);
  }
}

@keyframes full-circle {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(-360deg);
  }
}

@keyframes pop {
  0% {
    transform: scale3d(1, 1, 1) translateZ(0);
  }
  50% {
    transform: scale3d(1.1, 1.1, 1.1) translateZ(0);
  }
  100% {
    transform: scale3d(1, 1, 1) translateZ(0);
  }
}

@keyframes pop-center {
  0% {
    transform: scale3d(1, 1, 1) translate3d(-50%, -50%, 0);
  }
  50% {
    transform: scale3d(1.03,1.03,1.03) translate3d(-50%, -50%, 0);
    margin-left: 2px;
  }
  100% {
    transform: scale3d(1, 1, 1) translate3d(-50%, -50%, 0);
  }
}

.animate-rotate-vertical {
  animation: rotate-vertical 1.1s ease-out;
}

.animate-full-circle {
  animation: full-circle 1.1s ease-out;
}

.animate-pop {
  animation: pop .45s 2;
}

.animate-pop--center {
  animation: pop-center .45s 2;
}


// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
  -webkit-box-flex: $values;
     -moz-box-flex: $values;
      -webkit-flex: $values;
  	  -ms-flex: $values;
  	      flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
     -moz-flex-direction: $direction;
      -ms-flex-direction: $direction;
          flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
     -moz-flex-wrap: $wrap;
      -ms-flex-wrap: $wrap;
          flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
     -moz-flex-flow: $flow;
      -ms-flex-flow: $flow;
          flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
     -moz-box-ordinal-group: $val;     
  	     -ms-flex-order: $val;     
  	      -webkit-order: $val;  
  		      order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  -webkit-flex-grow: $grow;
     -moz-flex-grow: $grow;
      -ms-flex-grow: $grow;
          flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number> 
@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;
     -moz-flex-shrink: $shrink;
      -ms-flex-shrink: $shrink;
          flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width> 
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
     -moz-flex-basis: $width;
      -ms-flex-basis: $width;
          flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around 
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
     -moz-justify-content: $justify;
      -ms-justify-content: $justify;
          justify-content: $justify;
            -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch 
@mixin align-content($align) {
  -webkit-align-content: $align;
     -moz-align-content: $align;
      -ms-align-content: $align;
          align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch 
@mixin align-items($align) {
  -webkit-align-items: $align;
     -moz-align-items: $align;
      -ms-align-items: $align;
          align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
@mixin align-self($align) {
  -webkit-align-self: $align;
     -moz-align-self: $align;
      -ms-align-self: $align;
          align-self: $align;
}
